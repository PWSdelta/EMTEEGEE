#!/usr/bin/env python3
"""
Test the complete simplified workflow: request work -> get all 20 components -> submit results
"""

import os
import sys
import django

sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'emteegee.settings')
django.setup()

from cards.enhanced_swarm_manager import enhanced_swarm

def test_complete_workflow():
    """Test the complete simplified workflow"""
    print("🧪 TESTING COMPLETE SIMPLIFIED WORKFLOW")
    print("=" * 50)
    
    worker_id = "test_complete_workflow"
    
    # Step 1: Get work
    print(f"\n1️⃣ Getting work for {worker_id}...")
    tasks = enhanced_swarm.get_work(worker_id)
    
    if not tasks:
        print("❌ No work available")
        return
    
    task = tasks[0]
    task_id = task.get('task_id')
    card_name = task.get('card_name')
    card_id = task.get('card_id')
    card_uuid = task.get('card_uuid')
    components = task.get('components', [])
    
    print(f"✅ Got task: {card_name}")
    print(f"   📋 Task ID: {task_id}")
    print(f"   🎯 Card ID: {card_id}")
    print(f"   🧩 Components: {len(components)} (should be 20)")
    print(f"   📝 Component list: {components[:5]}...")
    
    if len(components) != 20:
        print(f"❌ ERROR: Expected 20 components, got {len(components)}")
        return
    
    # Step 2: Simulate analysis results
    print(f"\n2️⃣ Simulating analysis for all {len(components)} components...")
    analysis_results = {}
    
    for i, component in enumerate(components, 1):
        # Simulate real analysis content
        analysis_results[component] = f"""
This is a comprehensive {component} analysis for {card_name}.

First paragraph covering the key aspects of {component} relevant to this card. This would normally be generated by AI with detailed strategic insights, rules interactions, and practical advice.

Second paragraph providing additional depth, examples, and specific recommendations. The analysis would be tailored to the card's mechanics, power level, and common usage patterns in Magic: The Gathering.

Generated by test_complete_workflow simulation ({i}/{len(components)}).
        """.strip()
        
        if i % 5 == 0:  # Progress update every 5 components
            print(f"   ✅ Completed {i}/{len(components)} components")
    
    print(f"✅ Simulated analysis for all {len(components)} components")
    
    # Step 3: Submit results
    print(f"\n3️⃣ Submitting results...")
    
    # Use the same format as the actual worker
    results = {
        'results': analysis_results,
        'execution_time': 150.5,
        'model_info': {'model': 'test_simulation', 'version': '1.0'}
    }
    
    success = enhanced_swarm.submit_task_result(
        task_id=task_id,
        worker_id=worker_id, 
        card_id=card_uuid or card_id,
        results=results
    )
    
    if success:
        print(f"✅ Results submitted successfully!")
        print(f"🎉 Card {card_name} should now be marked as fully analyzed")
    else:
        print(f"❌ Failed to submit results")
    
    # Step 4: Verify the card is complete
    print(f"\n4️⃣ Verifying card completion...")
    from cards.models import get_mongodb_collection
    cards = get_mongodb_collection('cards')
    
    # Check the card status
    card = cards.find_one({'uuid': card_uuid}) or cards.find_one({'_id': card_id})
    if card:
        analysis = card.get('analysis', {})
        component_count = analysis.get('component_count', 0)
        fully_analyzed = analysis.get('fully_analyzed', False)
        
        print(f"📊 Final card status:")
        print(f"   Component count: {component_count}/20")
        print(f"   Fully analyzed: {fully_analyzed}")
        
        if component_count >= 20 and fully_analyzed:
            print(f"🎉 SUCCESS: Card is now fully analyzed!")
        else:
            print(f"⚠️  Card not marked as complete (count: {component_count}, analyzed: {fully_analyzed})")
    
    print(f"\n✅ Complete workflow test finished!")

if __name__ == "__main__":
    test_complete_workflow()
