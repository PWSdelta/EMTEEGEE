#!/usr/bin/env python3
"""
Minimal Working Swarm Test
"""

import json
import sys
import os

# Skip Django for now, just test the core logic
sys.path.append('.')

# Mock server for testing
class MockServer:
    def __init__(self):
        self.tasks = []
        self.results = []
    
    def get_work(self):
        # Return a mock task
        return {
            'task_id': 'test-123',
            'card_name': 'Lightning Bolt',
            'components': ['play_tips'],
            'card_data': {
                'name': 'Lightning Bolt',
                'mana_cost': '{R}',
                'type_line': 'Instant',
                'oracle_text': 'Lightning Bolt deals 3 damage to any target.'
            }
        }
    
    def submit_results(self, task_id, results):
        self.results.append({'task_id': task_id, 'results': results})
        print(f"‚úÖ Results submitted for task {task_id}")
        return True

# Mock Ollama client
class MockOllama:
    def generate(self, model, prompt):
        # Simulate model response
        return f"[Analysis generated by {model}]\n\n{prompt[:50]}...\n\nThis is a simulated analysis response."

def test_worker_logic():
    """Test the core worker logic without external dependencies"""
    print("üß™ Testing Core Worker Logic")
    print("="*40)
    
    server = MockServer()
    ollama = MockOllama()
    
    # Simulate worker getting task
    print("1Ô∏è‚É£ Getting work from server...")
    task = server.get_work()
    print(f"   Task: {task['card_name']} - {task['components']}")
    
    # Simulate analysis generation
    print("\n2Ô∏è‚É£ Generating analysis...")
    card_data = task['card_data']
    component = task['components'][0]
    
    prompt = f"""Analyze {card_data['name']} for {component}.
Card: {card_data['oracle_text']}
Provide practical tips."""
    
    analysis = ollama.generate('qwen2.5:7b', prompt)
    print(f"   Generated {len(analysis)} characters of analysis")
    
    # Simulate submitting results
    print("\n3Ô∏è‚É£ Submitting results...")
    results = {
        'components': {component: analysis},
        'execution_time': 5.2,
        'model_info': {'model': 'qwen2.5:7b', 'worker': 'desktop'}
    }
    
    server.submit_results(task['task_id'], results)
    
    print(f"\n‚úÖ Worker cycle completed successfully!")
    print(f"   Results stored: {len(server.results)} completed tasks")
    
    return True

def main():
    print("üêù Minimal Swarm System Test")
    print("="*50)
    
    if test_worker_logic():
        print("\nüéâ Core logic working! Ready to integrate with:")
        print("   - Real Ollama API")
        print("   - Django server")
        print("   - MongoDB storage")
        print("   - Network communication")
        print("\nNext step: Test desktop_worker_real.py with actual Ollama")

if __name__ == "__main__":
    main()
