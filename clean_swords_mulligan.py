#!/usr/bin/env python3
"""Clean and regenerate specific component for the Swords to Plowshares card."""

import os
import sys

# Add the project root to sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Set up Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'emteegee.settings')
import django
django.setup()

def clean_swords_mulligan():
    """Clean the mulligan component for Swords to Plowshares and mark for regeneration."""
    print("🧹 Cleaning Swords to Plowshares Mulligan Component")
    print("=" * 60)
    
    try:
        from cards.models import get_cards_collection
        
        cards_collection = get_cards_collection()
        target_uuid = "d56255aa-7e1f-4314-be35-dd29f0a52270"
        
        # Find the specific card
        card = cards_collection.find_one({'uuid': target_uuid})
        
        if not card:
            print(f"❌ Card with UUID {target_uuid} not found!")
            return
        
        print(f"🃏 Found card: {card.get('name', 'Unknown')}")
        
        # Get current analysis
        analysis = card.get('analysis', {})
        components = analysis.get('components', {})
        
        print(f"📊 Current components: {len(components)}")
        
        # Remove the mulligan_considerations component
        if 'mulligan_considerations' in components:
            print("🗑️ Removing mulligan_considerations component")
            del components['mulligan_considerations']
            
            # Update analysis
            analysis['components'] = components
            analysis['fully_analyzed'] = False
            analysis['component_count'] = len([c for c in components.values() if c is not None])
            
            # Update the card
            result = cards_collection.update_one(
                {'uuid': target_uuid},
                {'$set': {'analysis': analysis}}
            )
            
            if result.modified_count > 0:
                print(f"✅ Successfully removed mulligan_considerations from {card.get('name')}")
                print(f"📊 Components remaining: {analysis['component_count']}/20")
                print("🔄 Card marked as incomplete - will be regenerated by whole_shebang")
                
                # Show what components remain
                remaining = [name for name, data in components.items() if data is not None]
                print(f"📋 Remaining components: {', '.join(remaining)}")
                
            else:
                print("❌ Failed to update card")
        else:
            print("ℹ️ mulligan_considerations component not found or already empty")
            print("📋 Current components:")
            for name, data in components.items():
                status = "✅" if data else "❌"
                print(f"   {status} {name}")
        
        print(f"\n🎯 Next steps:")
        print(f"   1. Run: python manage.py whole_shebang --max-cards 1")
        print(f"   2. This will regenerate the missing component with improved prompts")
        print(f"   3. Check http://localhost:8000/card/{target_uuid}/ for results")
        
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    clean_swords_mulligan()
