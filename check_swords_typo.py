#!/usr/bin/env python3
"""Check specific card for the typo and manually clean if found."""

import os
import sys

# Add the project root to sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Set up Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'emteegee.settings')
import django
django.setup()

def check_swords_card():
    """Check the Swords to Plowshares card specifically."""
    print("üîç Checking Swords to Plowshares Card")
    print("=" * 50)
    
    try:
        from cards.models import get_cards_collection
        cards_collection = get_cards_collection()
        
        # Find the Swords to Plowshares card
        card = cards_collection.find_one({"uuid": "d56255aa-7e1f-4314-be35-dd29f0a52270"})
        
        if not card:
            print("‚ùå Card not found!")
            return
            
        print(f"üÉè Found card: {card.get('name', 'Unknown')}")
        
        components = card.get('analysis', {}).get('components', {})
        if not components:
            print("‚ÑπÔ∏è No analysis components found")
            return
            
        print(f"üìä Found {len(components)} components:")
        
        problematic_components = []
        
        # Check each component for the typo
        for comp_name, comp_text in components.items():
            if comp_text and isinstance(comp_text, str):
                if "Plowshops" in comp_text:
                    print(f"   üö® TYPO FOUND in {comp_name}!")
                    print(f"      Preview: ...{comp_text[max(0, comp_text.find('Plowshops')-20):comp_text.find('Plowshops')+30]}...")
                    problematic_components.append(comp_name)
                else:
                    print(f"   ‚úÖ {comp_name} - Clean")
        
        if problematic_components:
            print(f"\nüßπ Would you like to delete these {len(problematic_components)} problematic components?")
            print("   They will be regenerated by the next whole_shebang run.")
            for comp in problematic_components:
                print(f"   - {comp}")
                
            # For now, just report what we found
            print(f"\nüí° To fix:")
            print(f"   1. Delete the problematic components")
            print(f"   2. Mark card as not fully analyzed") 
            print(f"   3. Run: python manage.py whole_shebang --max-cards 1")
        else:
            print(f"\n‚úÖ No 'Plowshops' typo found in this card!")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_swords_card()
